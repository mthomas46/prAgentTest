name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOCKER_IMAGE: pr-agent-test
  DOCKER_REGISTRY: docker.io
  NODE_VERSION: '18'
  POSTGRES_VERSION: '16-alpine'
  ELASTICSEARCH_VERSION: '8.12.2'
  PROMETHEUS_VERSION: 'latest'
  GRAFANA_VERSION: 'latest'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check formatting
      run: npm run format:check

    - name: Run linting
      run: npm run lint:ci

    - name: Type check
      run: npm run type:check

    - name: Check documentation
      run: |
        # Check if all required documentation files exist
        required_docs=("README.md" "CHANGELOG.md" "COMMIT_HISTORY.md" "DIALOGUE_LOG.md" "STATISTICS.md")
        for doc in "${required_docs[@]}"; do
          if [ ! -f "docs/$doc" ]; then
            echo "Missing required documentation file: $doc"
            exit 1
          fi
        done

        # Check if CHANGELOG.md has been updated
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "CHANGELOG.md"; then
          echo "CHANGELOG.md has been updated"
        else
          echo "Warning: CHANGELOG.md has not been updated"
        fi

    - name: Check Node.js version
      run: |
        if [ "$(node -v)" != "v${{ env.NODE_VERSION }}" ]; then
          echo "Node.js version mismatch. Expected v${{ env.NODE_VERSION }}, got $(node -v)"
          exit 1
        fi

  test:
    needs: validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
        database: [postgres:16-alpine, postgres:15-alpine]
    services:
      postgres:
        image: ${{ matrix.database }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pr_agent_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:${{ env.ELASTICSEARCH_VERSION }}
        env:
          discovery.type: single-node
          xpack.security.enabled: false
        ports:
          - 9200:9200
      prometheus:
        image: prom/prometheus:${{ env.PROMETHEUS_VERSION }}
        ports:
          - 9090:9090

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests with coverage
      run: npm run test:cov
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_DATABASE: pr_agent_test
        ELASTICSEARCH_URL: http://localhost:9200
        PROMETHEUS_URL: http://localhost:9090
        REDIS_URL: redis://localhost:6379

    - name: Run integration tests
      run: npm run test:e2e
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_DATABASE: pr_agent_test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/coverage-final.json
        fail_ci_if_error: true

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Run container security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Run OWASP dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'PR Agent Test'
        path: '.'
        format: 'HTML'
        out: 'reports'
        args: >
          --suppression ./.dependency-check/suppressions.xml
          --failOnCVSS 7
          --enableRetired

    - name: Run npm audit
      run: npm audit

    - name: Check for secrets in code
      uses: gitleaks/gitleaks-action@v2
      env:
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  build-and-push:
    needs: security
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          VERSION=${{ github.sha }}
          NODE_VERSION=${{ env.NODE_VERSION }}

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.example.com
    steps:
    - uses: actions/checkout@v4

    - name: Deploy monitoring stack
      run: |
        docker-compose -f docker-compose.monitoring.yml up -d
        ./scripts/import-dashboards.sh

    - name: Deploy application
      run: |
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        docker-compose up -d

    - name: Run database migrations
      run: npm run typeorm migration:run

    - name: Health check
      run: |
        ./scripts/health-check.sh
        curl -f http://localhost:3001/health
        curl -f http://localhost:9090/-/healthy
        curl -f http://localhost:9200/_cluster/health

  performance:
    needs: deploy-staging
    runs-on: ubuntu-latest
    steps:
    - name: Run k6 performance tests
      uses: grafana/k6-action@v0.3.0
      with:
        filename: performance/load-test.js

    - name: Check metrics
      run: |
        curl -f http://localhost:9090/api/v1/query?query=http_request_duration_seconds_bucket

  deploy-production:
    needs: [deploy-staging, performance]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.example.com
    steps:
    - name: Deploy to production
      run: |
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        docker-compose -f docker-compose.prod.yml up -d

    - name: Verify deployment
      run: |
        ./scripts/verify-deployment.sh
        curl -f https://api.example.com/health

    - name: Configure monitoring
      run: |
        docker-compose -f docker-compose.monitoring.yml up -d
        ./scripts/import-dashboards.sh

    - name: Monitor deployment
      run: |
        ./scripts/monitor-deployment.sh 300 # Monitor for 5 minutes
      
    - name: Rollback on failure
      if: failure()
      run: |
        docker-compose -f docker-compose.prod.yml down
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}-previous
        echo "Deploying to production environment"
        # Add your production deployment steps here
        # For example:
        # - SSH into production server
        # - Pull new image
        # - Update docker-compose
        # - Restart services

  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Send notification
      uses: actions/github-script@v7
      with:
        script: |
          const status = context.job === 'notify' ? 'completed' : context.job;
          const message = `Pipeline ${status} for ${context.ref}`;
          // Add your notification logic here
          // For example, sending to Slack or email 