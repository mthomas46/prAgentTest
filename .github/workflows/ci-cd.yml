name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOCKER_IMAGE: pr-agent-test
  DOCKER_REGISTRY: docker.io
  NODE_VERSION: '18'
  POSTGRES_VERSION: '16-alpine'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check formatting
      run: npm run format:check

    - name: Run linting
      run: npm run lint:check

    - name: Type check
      run: npm run type:check

    - name: Check documentation
      run: |
        # Check if all required documentation files exist
        required_docs=("README.md" "CHANGELOG.md" "COMMIT_HISTORY.md" "DIALOGUE_LOG.md" "STATISTICS.md")
        for doc in "${required_docs[@]}"; do
          if [ ! -f "docs/$doc" ]; then
            echo "Missing required documentation file: $doc"
            exit 1
          fi
        done

        # Check if CHANGELOG.md has been updated
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "CHANGELOG.md"; then
          echo "CHANGELOG.md has been updated"
        else
          echo "Warning: CHANGELOG.md has not been updated"
        fi

    - name: Check Node.js version
      run: |
        if [ "$(node -v)" != "v${{ env.NODE_VERSION }}" ]; then
          echo "Node.js version mismatch. Expected v${{ env.NODE_VERSION }}, got $(node -v)"
          exit 1
        fi

  test:
    needs: validate
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pr_agent_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests with coverage
      run: npm run test:cov
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_DATABASE: pr_agent_test

    - name: Run logger service tests
      run: npm run test -- test/logger.service.spec.ts
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_DATABASE: pr_agent_test

    - name: Run tests in Docker
      run: |
        npm run test:docker
        npm run test:docker:clean
      env:
        DB_HOST: postgres
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_DATABASE: pr_agent_test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/coverage-final.json
        fail_ci_if_error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          ./coverage
          ./test-results

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    - name: Run OWASP dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'PR Agent Test'
        path: '.'
        format: 'HTML'
        out: 'reports'
        args: >
          --suppression ./.dependency-check/suppressions.xml
          --failOnCVSS 7
          --enableRetired

    - name: Run npm audit
      run: npm audit

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          ./reports
          ./npm-audit.json

  build-and-push:
    needs: security
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,format=long

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          VERSION=${{ github.sha }}
          NODE_VERSION=${{ env.NODE_VERSION }}

    - name: Verify Docker image
      run: |
        docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
        docker run --rm ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest node -v

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment steps here
        # For example:
        # - SSH into staging server
        # - Pull new image
        # - Update docker-compose
        # - Restart services

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment steps here
        # For example:
        # - SSH into production server
        # - Pull new image
        # - Update docker-compose
        # - Restart services

  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Send notification
      uses: actions/github-script@v7
      with:
        script: |
          const status = context.job === 'notify' ? 'completed' : context.job;
          const message = `Pipeline ${status} for ${context.ref}`;
          // Add your notification logic here
          // For example, sending to Slack or email 