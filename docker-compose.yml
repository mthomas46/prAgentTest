version: '3.8'

services:
  draupnir_external:
    build:
      context: ./services/draupnir_external
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
    volumes:
      - ./services/draupnir_external/logs:/app/logs
    networks:
      - draupnir_network

  draupnir_internal:
    build:
      context: ./services/draupnir_internal
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - GATEWAY_URL=http://task-service:3000
      - CORE_SERVICES_URL=http://localhost:3005
    volumes:
      - ./services/draupnir_internal/logs:/app/logs
    networks:
      - draupnir_network
    depends_on:
      - task-service

  postgres:
    image: postgres:16-alpine
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=task_service
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - draupnir_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  loki:
    image: grafana/loki:2.8.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - draupnir_network
    healthcheck:
      test: ["CMD-SHELL", "wget -q --tries=1 -O- http://localhost:3100/ready || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  task-service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/task_service
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - draupnir_network

networks:
  draupnir_network:
    driver: bridge

volumes:
  postgres_data:
  grafana_data:
  elasticsearch_data:
  loki_data:
  loki_rules: